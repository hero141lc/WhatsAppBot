<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>用户工作面板</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container">
            <a class="navbar-brand" href="#">用户工作面板</a>
            <ul class="navbar-nav ml-auto">
                <li class="nav-item">
                    <a class="nav-link" href="#">首页</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/logout">注销</a>
                </li>
            </ul>
        </div>
    </nav>

    <div class="container mt-5">
        <div class="row">
            <% accounts.forEach(account => { %>
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <% if (accounts.length < 1) { %>
                            <p class="text-center">您还没有登录任何 WhatsApp 账号。</p>
                            <p class="text-center">

                            </p>
                            <% }%>
                                <div class="card-header">
                                    WhatsApp 账号
                                    <% if (account.isLoggedIn) { %>
                                        <span class="badge bg-success float-right"></span>
                                        <% } %>
                                </div>
                                <div class="card-body">
                                    <h5 class="card-title">
                                        <%= account.phone %>
                                    </h5>
                                    <p class="card-text">备注:
                                        <%= account.nickName %>
                                    </p>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="autoReplySwitch<%= account.id %>">
                                        <label class="form-check-label" for="autoReplySwitch<%= account.id %>">开关自动回复</label>
                                    </div>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input" type="checkbox" id="aiReplySwitch<%= account.id %>">
                                        <label class="form-check-label" for="aiReplySwitch<%= account.id %>">开关 AI 回复</label>
                                    </div>
                                    <p class="mt-3">
                                        <a href="#" class="btn btn-primary btn-sm mr-2" data-bs-toggle="modal" data-bs-target="#editAccountModal" data-accountId="<%= account._id %>" data-phone="<%= account.phone %>" data-nickName="<%= account.nickName %>" data-customReply="<%= account.customReply %>"
                                            data-autoReply="<%= account.autoReply %>" data-aiReply="<%= account.aiReply %>">
              修改
           </a>

                                        <a href="/delete_account?id=<%= account._id %>" class="btn btn-danger btn-sm">删除</a>

                                        <% if (account.isLoggedIn) { %>
                                            <a href="/logout" class="btn btn-danger btn-sm">注销</a>
                                            <% } else { %>
                                                <button type="button" class="btn btn-primary btn-sm show-qr-btn" data-bs-toggle="modal" data-bs-target="#qrCodeModal" data-account="<%= account %>" data-phone="<%= account.phone %>">登录</button>

                                                <!-- 模态框 -->
                                                <div class="modal fade" id="qrCodeModal" tabindex="-1" aria-labelledby="qrCodeModalLabel" aria-hidden="true">
                                                    <div class="modal-dialog">
                                                        <div class="modal-content">
                                                            <div class="modal-header">
                                                                <h5 class="modal-title" id="qrCodeModalLabel">扫描二维码以登录 WhatsApp</h5>
                                                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                            </div>
                                                            <div class="modal-body">
                                                                <img id="qrCodeImage" src="static/images/R-C.gif" alt="WhatsApp QR Code">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>

                                                <% } %>
                                    </p>
                                </div>
                    </div>
                </div>

                <% }) %>
        </div>
        <div class="text-end">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addAccountModal">添加新账号</button>
        </div>
    </div>
    <!-- 添加新账号的弹窗 -->
    <div class="modal fade" id="addAccountModal" tabindex="-1" aria-labelledby="addAccountModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addAccountModalLabel">添加新账号</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="errorAlert" class="alert alert-danger" role="alert" style="display: none;"></div>
                    <div id="successAlert" class="alert alert-success" role="alert" style="display: none;">新账号已添加</div>

                    <div class="mb-3">
                        <label for="phone" class="form-label">电话</label>
                        <input type="text" class="form-control" id="phone" required>
                    </div>
                    <div class="mb-3">
                        <label for="nickName" class="form-label">昵称/备注</label>
                        <input type="text" class="form-control" id="nickName" required>
                    </div>
                    <div class="mb-3 hide">
                        <label for="customReply" class="form-label">自定义自动回复</label>
                        <input type="text" class="form-control" id="customReply">
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="autoReply" checked>
                        <label class="form-check-label" for="autoReply">开关自动回复</label>
                    </div>
                    <div class="mb-3 form-check">
                        <input type="checkbox" class="form-check-input" id="aiReply" checked>
                        <label class="form-check-label" for="aiReply">开关 AI 回复</label>
                    </div>
                    <input type="hidden" id="alive" value="false">
                    <input type="hidden" id="userId" value="<%= userId %>">
                    <button id="saveAccountBtn" class="btn btn-primary">保存</button>
                </div>
            </div>
        </div>
    </div>
    <script src="static/js/qrcode.min.js"></script>


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const autoReplySwitches = document.querySelectorAll('.form-check-input[id^="autoReplySwitch"]');
            const aiReplySwitches = document.querySelectorAll('.form-check-input[id^="aiReplySwitch"]');

            autoReplySwitches.forEach(switchElement => {
                switchElement.addEventListener('change', function() {
                    const accountId = this.getAttribute('data-account-id');
                    const phoneNumber = this.getAttribute('data-phone');
                    const newAutoReplyStatus = !this.checked; // Toggle the auto reply status

                    // Send data to the backend to update auto reply status
                    updateReplyStatus(accountId, phoneNumber, 'autoReply', newAutoReplyStatus);
                });
            });

            aiReplySwitches.forEach(switchElement => {
                switchElement.addEventListener('change', function() {
                    const accountId = this.getAttribute('data-account-id');
                    const phoneNumber = this.getAttribute('data-phone');
                    const newAiReplyStatus = !this.checked; // Toggle the AI reply status

                    // Send data to the backend to update AI reply status
                    updateReplyStatus(accountId, phoneNumber, 'aiReply', newAiReplyStatus);
                });
            });

            async function updateReplyStatus(accountId, phoneNumber, replyType, newStatus) {
                try {
                    const requestData = {
                        accountId,
                        phoneNumber,
                        replyType,
                        newStatus
                    };

                    // Send POST request to update reply status
                    const response = await fetch('/update_reply_status', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestData)
                    });

                    const data = await response.json();
                    console.log(data); // Log the server response
                } catch (error) {
                    console.error('Error updating reply status:', error);
                }
            }
        });




        document.addEventListener('DOMContentLoaded', function() {
            const showQrButtons = document.querySelectorAll('.show-qr-btn');
            const qrCodeImage = document.getElementById('qrCodeImage');

            showQrButtons.forEach(button => {
                button.addEventListener('click', async function() {
                    const phoneNumber = this.getAttribute('data-phone');
                    const account = this.getAttribute('data-account');
                    const sessionName = generateSessionName(); // Generate your sessionName here

                    const requestData = {
                        phoneNumber,
                        sessionName,
                        account
                    };

                    // Send POST request to /login
                    fetch('/login', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(requestData)
                        })
                        .then(response => response)
                        .then(data => {
                            // Generate QR code from base64 data
                            var qr = new QRCode(qrCodeImage, {
                                text: '',
                                width: 200,
                                height: 200
                            });

                            console.log(data); // Log server response data
                            // Start updating QR code every second
                            const updateQrCode = () => {
                                fetch(`/get_qr_code?phoneNumber=${phoneNumber}`)
                                    .then(response => response.json())
                                    .then(data => {
                                        console.log("qr22::", data)
                                        if (data.qrCodeData) {
                                            qrCodeImage.src = ''
                                            qr.makeCode(data.qrCodeData)

                                            setTimeout(updateQrCode, 30000);
                                            // Hide the loading GIF
                                            //qrCodeImage.removeAttribute('hidden');
                                        } else {
                                            setTimeout(updateQrCode, 1000); // Retry after 1 second
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error getting QR code:', error);
                                    });
                            };

                            updateQrCode(); // Start updating QR code
                        })
                        .catch(error => {
                            console.error('Error logging in:', error);
                            // Handle error
                        });
                });
            });
            // 生成 sessionName 的函数，根据实际情况修改
            function generateSessionName() {
                const timestamp = new Date().getTime(); // 当前时间戳
                const randomSuffix = Math.floor(Math.random() * 1000); // 0 到 999 之间的随机数
                return `Session-${timestamp}-${randomSuffix}`;
            }

        });


        document.addEventListener('DOMContentLoaded', function() {
            const saveAccountBtn = document.getElementById('saveAccountBtn');
            const errorAlert = document.getElementById('errorAlert');
            const successAlert = document.getElementById('successAlert');

            saveAccountBtn.addEventListener('click', async function() {
                errorAlert.style.display = 'none';
                successAlert.style.display = 'none';

                const phone = document.getElementById('phone').value;
                const nickName = document.getElementById('nickName').value;
                const customReply = document.getElementById('customReply').value;
                const autoReply = document.getElementById('autoReply').checked;
                const aiReply = document.getElementById('aiReply').checked;
                const alive = document.getElementById('alive').value;
                const userId = document.getElementById('userId').value;

                const data = {
                    phone,
                    nickName,
                    customReply,
                    autoReply,
                    aiReply,
                    alive,
                    userId
                };

                try {
                    console.log(data)
                    const response = await fetch('/add_whatsapp_account', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        successAlert.style.display = 'block';
                        setTimeout(() => {
                            location.reload(); // 重新加载页面以显示更新后的账号列表
                        }, 1000);
                    } else {
                        errorAlert.style.display = 'block';
                    }
                } catch (error) {
                    console.error('Error adding new account', error);
                    errorAlert.style.display = 'block';
                }
            });
        });
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>

</html>